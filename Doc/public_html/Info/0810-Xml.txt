 XML - eXtensible Markup Language
 ==============================================================

  What is XML? -- It is not a markup language but it is the
                  standards (rules) to create new markup
                  language.

  What are XML standards?

                -- Elements are case-sensitive
                -- Each element must have appropriate close tag
                -- Each document must have only and only one
                   root element.
                -- Elements are strictly nested.
                -- Attribute value must be enclosed in single
		   or double quotes.
                -- Whitespaces are preserved.
                -- If you wish to store data into disk file then
		   choose .xml extension however it is not
                   mandatory.

  What is need to create new markup language? 

    The main role of markup language to describe the data for
    the applications (programs) and also people. Each computing
    environment, progrmaming language has a software called     "PARSER" -- which correctly read/write markup data.

    So XML format of data can be consumed all over the world with
    the help of standard "PARSERS".

    There are two standard parsers exists:

      1. DOM - Document Object Model and
      2. SAX - Simple API for XML

    Apart from these two standards, there are some non-standard
    ways/API exists to read/write markup.

   In Java, Java API from XML Processing - JAXP API contains
  implementation of both - standard (DOM & SAX) and non-standard.
   
   [NOTE: There is another standard to describe data is called           JavaScript Object Notation - JSON. Number of apps 	 (mobile) and web-services uses two standards - XML and 	         JSON]

 Create the new markup language
 -------------------------------------------------------------

 Following markup language called "student" to describe student data.

 <?xml version="1.0"?>  <---- It is called "pre-processor".
                              And we are using XML 1.0 standard.

 <students>             <----- This is root element
                
   <student className="1st">     
                ^
                |----------------- Attribute
       <roll>10</roll>
       <name>Raj</name>
   </student>
   <student className="2nd">
        <roll>20</roll>
        <name>Man</name>
   </student>
 </students>



 The Parsers
 =============

 Parsers are software to read or write and validate markup
 programatically.

 The DOM parser reads whole markup document (root and all of its  children) at once and create an object for each element & text  and place them into the DOM-tree.

 For example,

 <formula>
   <x>10</x>
   <op>+</op>
   <y>20</y>
 </formula>
 

 and DOM-tree will be:

 +formula       <--- Root node or element
        |
        +x--+   <--- x node
            |
            +10 <--- text node (value)
        +op-+ 
            |
            ++
        +y--+
            |
            +20
         
   Because DOM loads all elements at once so it consumes lots of
   memory when document is large/huge and it is the only    disadvantage of DOM.

 The SAX Parser
 ==============
 The SAX parser read XML document serially (character by  character) and raises number of events to let us know the
 element or character (text) boundary.

 SAX parser is best suited to read / parse the huge XML  documents.


 JAXP -- interfaces and classes
 -------------------------------------------------------------

 Packages org.w3c.dom and org.xml.sax are two standards and
 their implementations are found in javax.xml.parsers and
 javax.xml.transform packages.

 You will find interfaces for DOM in org.w3c.dom and its  implementation is exists into javax.xml.parsers package.

 How to use DOM parser API?
 -----------------------------
 
 Firstly we have to create DocumentBuilder object from  DocumentBuilderFactory and then create a new Document or read
 the Document.

 At end we must need "Transformer" object to transform  DOM/SAX/Stream to DOM/SAX/Stream.

Example: 

 //1. Initialize the DOM Parser
 DocumentBuilderFactory factory = DocumentBuilderFactory
                                    .newInstance();
 //2. Create Document Builder object
 DocumentBuilder builder = factory.newDocumentBuilder();
        
 //3. Create New Document (org.w3c.dom.Document interface)
        
 Document document = builder.newDocument();
        
 //4. Create Root Element
        
 Element root = document.createElement("students");
        
 //5. Add children
        
        Element student = document.createElement("student");
        student.setAttribute("className", "1st");
        Element roll = document.createElement("roll");
        Element name = document.createElement("name");
        roll.appendChild( document.createTextNode("10") );
        name.appendChild( document.createTextNode("Raj") );
        
        
        student.appendChild(roll);
        student.appendChild(name);
        root.appendChild(student);
        
 //6. Add root to the document
 document.appendChild(root);
        
// 7. Transform DOM into Stream (disk file)
 TransformerFactory tfactory = TransformerFactory.newInstance();
 Transformer trans = tfactory.newTransformer();
        
 //Create DOM Source
 DOMSource source = new DOMSource(document);
 //Create Stream Result
 StreamResult result = new StreamResult(
                           new File("c:/javaprg/89/std.xml"));
        
 //Transform the DOM
 trans.setOutputProperty(OutputKeys.INDENT, "yes");
 trans.transform(source, result); //create disk file

[Note: Parser throws an exception so wrap above code with        try..catch block]

Example: Create "Wrapper" class to encapsulate DOM and Tranform methods.

 public class Doc {

    private Document doc = null;
    private Element root = null;

    public Node getRoot() { return root;}
    public Doc(String rootName) {
        try {
            doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();
            root = doc.createElement(rootName);
            doc.appendChild(root);
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }

    public Node create(String elementName, String value) {
        Element ele = doc.createElement(elementName);
        if (value != null) {
            ele.appendChild(doc.createTextNode(value));
        }
        return ele;
    }
    public Node add(Node parent,Node child){
        parent.appendChild(child);
        return parent;
    }

    public void save(String fileName) {
        try {
            TransformerFactory tfactory = TransformerFactory.newInstance();
            Transformer trans = tfactory.newTransformer();

            //Create DOM Source
            DOMSource source = new DOMSource(doc);
            //Create Stream Result
            StreamResult result = new StreamResult(new File(fileName));

            //Transform the DOM
            trans.setOutputProperty(OutputKeys.INDENT, "yes");

            trans.transform(source, result);
        } catch (TransformerException ex) {
            System.out.println(ex);
        }
    }

}

And use "Doc" class:

        Doc x=new Doc("Emps");
        
        Node emp = x.create("Emp", null);
        x.add(emp, x.create("ID", "10"));
        x.add(emp,x.create("Name", "Raj"));
        x.add(x.getRoot(), emp);
        
        emp = x.create("Emp", null);
        x.add(emp, x.create("ID", "20"));
        x.add(emp,x.create("Name", "Manish"));
        x.add(x.getRoot(), emp);
        x.save("c:/javaprg/89/emps.xml");


Read the XML document
=============================================================

 Call the "parse" method of DocumentBuilder object to load the 
 document.

 Example:

//1. Initialize the DOM Parser
DocumentBuilderFactory factory= DocumentBuilderFactory
                                .newInstance();
//2. Create Document Builder object
DocumentBuilder builder = factory.newDocumentBuilder();

File file = new File("c:/javaprg/89/std.xml");

//Parse method load the DOM-tree and returns Document object

Document document = builder.parse(file);

//3. Obtain the "root" node
Element root = document.getDocumentElement();

//Retrive the children
 NodeList list = root.getChildNodes();
 System.out.println(list.getLength());
 for (int i = 0; i < list.getLength(); i++) {
      Node student = list.item(i);
         if (student.hasAttributes()) {
             System.out.println(((Element) student)
                           .getAttribute("className"));
           }
          if (student.getNodeType() == Node.ELEMENT_NODE) {
                //List the children of student
                NodeList list1 = student.getChildNodes();
                for (int j = 0; j < list1.getLength(); j++) {
                   Node node = list1.item(j);
                   if (node.getNodeType() == Node.ELEMENT_NODE) {
                        System.out.println(node.getNodeName() 
                             + " " + node.getTextContent());
                    }
                }
          }
  }

Select nodeName using document.getElementsByTagName
-----------------------------------------------------
 ....
 ....
 Document document = builder.parse(file);
 
  //NodeList of "<name>" tag name
  NodeList list = document.getElementsByTagName("name");
        
   System.out.println(list.getLength());
        for (int i = 0; i < list.getLength(); i++) {
            Node name = list.item(i);
             
            if (name.getNodeType() == Node.ELEMENT_NODE) {
                System.out.println(name.getTextContent());
            }
        }

Search a node and then delete the parent node.
-------------------------------------------------

....
....
Document document = builder.parse(file);
Element root = document.getDocumentElement();
 
//NodeList of "<name>" tag name
NodeList list = document.getElementsByTagName("roll");
        

 for (int i = 0; i < list.getLength(); i++) {
            Node node = list.item(i);
            if (node.getNodeType() == Node.ELEMENT_NODE) {

                 //Search the node
                 if(node.getTextContent().equals("20")) {
                     Node parent = node.getParentNode();
                     root.removeChild(parent);
                 }
            }
        }
        
  //Write DOM to stream --- Transformer
         
 TransformerFactory tfactory =                   TransformerFactory.newInstance();
 Transformer trans = tfactory.newTransformer();

 //Create DOM Source
 DOMSource source = new DOMSource(document);
 //Create Stream Result
 StreamResult result = new StreamResult
               (new File("c:/javaprg/89/std.xml"));

 //Transform the DOM
  trans.setOutputProperty(OutputKeys.INDENT, "yes");
  trans.transform(source, result);


SAX -- Event driven and sequentially reading characters
============================================================
To read huge XML document, we must have to use SAX.

In order to use SAX, we must have to create "Handler" class by extending "DefaultHandler" class and initialize the SAX engine via SAX factory and parser classes.

std.xml
-------
<?xml version="1.0"?>
<students>
 <student className="1st"> 
   <roll>10</roll>
   <name>Mr.A</name>
  </student>
  .....
  .....
</students>

MyHandler.java
---------------
public class MyHandler extends DefaultHandler {

    private List<Student> list = new ArrayList<Student>();
    private Student std;
    private String data;

    @Override
    public void characters(char[] array, int start, int length)                                             throws SAXException {
        data = new String(array, start, length);
    }

    @Override
    public void endElement(String uri, String localName, 
                          String qName) throws SAXException {
        if (qName.equals("roll")) {
            std.setRoll(data);
        }
        if (qName.equals("name")) {
            std.setName(data);
        }
        if (qName.equals("student")) {
            list.add(std);
        }
    }

    @Override
    public void startElement(String uri, String localName, 
       String qName, Attributes attributes) throws SAXException {
        if (qName.equals("student")) {
            std = new Student();
            std.setClassName(attributes.getValue("className"));
        }
    }

    public List<Student> getList() {
        return list;
    }
}

Student.java
----------------
public class Student {
  private String className,roll,name;
  .....
}


code in Main:
 //1. Init the SAX
 SAXParserFactory factory = SAXParserFactory.newInstance();
 SAXParser sax = factory.newSAXParser();
 
 File file = new File("c:/javaprg/89/std.xml");
         
 //Create handler object
 MyHandler handle = new MyHandler();
        
 sax.parse(file, handle); // This method populate the List<T>

 for(Student s: handle.getList()) {
      System.out.println(s);
 }
